#version 450

layout(local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0, rgba8) uniform writeonly image2D outputImage;

layout(set = 0, binding = 1) readonly buffer GaussianPositions {
    vec3 positions[];
};

layout(set = 0, binding = 2) readonly buffer GaussianScales {
    vec3 scales[];
};

layout(set = 0, binding = 3) readonly buffer GaussianRotations {
    vec4 rotations[];
};

layout(set = 0, binding = 4) readonly buffer GaussianOpacities {
    float opacities[];
};

layout(set = 0, binding = 5) readonly buffer GaussianSH {
    float sh_coefficients[];
};

layout(set = 0, binding = 6) uniform CameraUniforms {
    mat4 viewMatrix;
    mat4 projMatrix;
} camera;


void main() {
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 imageDims = imageSize(outputImage);
    
    if (pixelCoords.x >= imageDims.x || pixelCoords.y >= imageDims.y) {
        return;
    }
    
    vec3 firstPos = positions[pixelCoords.x + pixelCoords.y *  imageDims.x ];
    
    // Use position coordinates as color (normalize to 0-1 range)
    vec3 color = abs(firstPos)/100;  // Divide by 10 to get reasonable range
    
    imageStore(outputImage, pixelCoords, vec4(0.0, 0.0, color.z, 1.0));

}