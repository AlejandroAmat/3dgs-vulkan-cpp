#version 450

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

// Output image
layout(binding = 0, rgba8) uniform writeonly image2D outputImage;

// Input buffers (results from preprocessing)
layout(binding = 1) readonly buffer InputRadii {
    int radii[];
};

layout(binding = 2) readonly buffer InputDepths {
    float depths[];
};

layout(binding = 3) readonly buffer InputRGB {
    float rgb[];
};

layout(binding = 4) readonly buffer InputPointsXY {
    vec2 pointsXY[];
};

layout(binding = 5) readonly buffer InputPositions {
    vec3 positions[];
};

// Camera uniforms
layout(binding = 6) uniform CameraUniforms {
    mat4 viewMatrix;
    mat4 projMatrix;
    vec3 camPos;
    float focal_x;
    float focal_y; 
    float tan_fovx;
    float tan_fovy;
    int imageWidth;
    int imageHeight;
    int shDegree;
} camera;

void main() {
    ivec2 coords = ivec2(gl_GlobalInvocationID.xy);
    if (coords.x >= imageSize(outputImage).x || coords.y >= imageSize(outputImage).y) return;
    
    vec2 pixelPos = vec2(coords);
    
    // Find FIRST Gaussian that covers this pixel
    for (int i = 0; i < min(10000, int(radii.length())); i++) {
        if (radii[i] <= 0) continue;  // Skip culled Gaussians
        
        vec2 gaussianPos = pointsXY[i];
        float distance = length(pixelPos - gaussianPos);
        

        if (distance <= float(radii[i])) {
            // Found one! Show its color and stop
            vec3 color = vec3(rgb[i * 3 + 0], rgb[i * 3 + 1], rgb[i * 3 + 2]);
            imageStore(outputImage, coords, vec4(color, 1.0));
            return;
        }
    }
    
    // No Gaussian found - black background
    imageStore(outputImage, coords, vec4(0.0, 0.0, 0.0, 1.0));
}